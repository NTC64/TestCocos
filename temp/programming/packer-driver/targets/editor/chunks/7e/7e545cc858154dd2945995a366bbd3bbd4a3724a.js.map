{"version":3,"sources":["file:///D:/Creator/source/Test/assets/script/scene.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","macro","Vec3","Sprite","Color","director","Input","collier","ccclass","property","Screen","squareCount","squares","onLoad","initSquare","tryAgain","active","results","getChildByName","schedule","createSquare","REPEAT_FOREVER","start","console","log","squarePrefab","on","EventType","MOUSE_DOWN","onTouchStart","event","getButton","resume","resetGame","randomX","Math","random","position","squareNode","node","addChild","push","setPosition","sprite","getComponent","color","hideAllSquares","squaresContainer","children","forEach","child","name","destroy","error","update","deltaTime"],"mappings":"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","sourcesContent":["// Screen.ts\r\nimport { _decorator, Component, Node, Prefab, instantiate,macro,RigidBody2D ,Vec3,Sprite,BoxCollider2D,Color, Quat, director, Input, Director } from 'cc';\r\nimport { Square } from './square'; // Assuming the class is named 'Square'\r\nconst { ccclass, property } = _decorator;\r\nimport { collier } from './collision';\r\n@ccclass('Screen')\r\nexport class Screen extends Component {\r\n  \r\n  @property(Prefab)\r\n  squarePrefab: Prefab = null;\r\n  @property(Node)\r\n  tryAgain: Node=null;\r\n  @property(Node)\r\n  results: Node=null;\r\n  @property(Node)\r\n  game: Node=null;\r\n  @property(collier)\r\n  collier: collier=null;\r\n  private squareCount: number = 0; // Biến đếm\r\n  private squares: Node[] = [];\r\n  onLoad() {\r\n   this.initSquare();\r\n    this.tryAgain.active=false;\r\n    this.results.getChildByName(\"endScore\").active=false;\r\n    this.results.getChildByName(\"topScore\").active=false;\r\n    this.results.getChildByName(\"backgroundResults\").active=false;\r\n\r\n}\r\n    initSquare(){\r\n      this.schedule(this.createSquare, 1, macro.REPEAT_FOREVER, 1);\r\n    }\r\n     start() {\r\n        console.log('Prefab:', this.squarePrefab);\r\n        this.tryAgain.on(Input.EventType.MOUSE_DOWN, this.onTouchStart, this);\r\n    }\r\n   \r\n    onTouchStart(event) {\r\n      if (event.getButton() === 0) {\r\n        director.resume();\r\n        this.initSquare();\r\n        this.resetGame();\r\n\r\n      }\r\n  }\r\n  resetGame() {\r\n\r\n    this.tryAgain.active = false;\r\n    this.results.getChildByName(\"endScore\").active = false;\r\n    this.results.getChildByName(\"topScore\").active = false;\r\n    this.results.getChildByName(\"backgroundResults\").active = false;\r\n}\r\n\r\n    createSquare() {\r\n      const randomX = Math.random() * 400 - 200;\r\n      const position = new Vec3(randomX, 421.611, 0);\r\n\r\n      const squareNode = instantiate(this.squarePrefab);\r\n      this.node.addChild(squareNode);\r\n      this.squares.push(squareNode);\r\n      squareNode.setPosition(position);\r\n      \r\n      const sprite = squareNode.getChildByName(\"square\").getComponent(Sprite); // Lấy component Sprite của squareNode\r\n     \r\n      // Nếu là mỗi 5 cái thì đặt màu đỏ, ngược lại là màu đen\r\n      if (this.squareCount % 5 === 0 && this.squareCount!==0) {\r\n          sprite.color = new Color(221, 66, 71, 255); // Màu đỏ\r\n      } else {\r\n          sprite.color = new Color(53, 53, 63, 255); // Màu đen\r\n      }\r\n      this.squareCount++;\r\n  }\r\n \r\n    hideAllSquares() {\r\n      const squaresContainer = this.node; // Thay bằng node cha của các square\r\n      squaresContainer.children.forEach(child => {\r\n          if (child.name === \"square\") {\r\n            try {\r\n                child.getChildByName(\"square\").destroy();\r\n            } catch (error) {\r\n              \r\n            }\r\n            \r\n          }\r\n      });\r\n \r\n    \r\n}\r\n  update(deltaTime: number) {\r\n    // Logic cập nhật nếu cần\r\n   \r\n    \r\n  }\r\n}\r\n"]}